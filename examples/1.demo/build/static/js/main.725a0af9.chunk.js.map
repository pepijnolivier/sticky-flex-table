{"version":3,"sources":["utils/getData.js","sticky-flex/HeadOrBodyContext.js","sticky-flex/THead.js","sticky-flex/TBody.js","sticky-flex/LocationContext.js","sticky-flex/Table.js","sticky-flex/index.js","sticky-flex/Tr.js","sticky-flex/Th.js","sticky-flex/Td.js","App.js","serviceWorker.js","index.js"],"names":["getValueForColumn","column","age","id","date","days","result","Date","setDate","getDate","addDays","toLocaleDateString","val","parseInt","Math","random","Intl","NumberFormat","format","LocationContext","React","createContext","tableElement","THead","props","children","HeadOrBodyContext","Provider","value","TBody","addSpacer","columns","data","slice","from","to","undefined","getDataSlice","till","map","row","Table","stickyLeftColumnCount","stickyRightColumnCount","contentColumnCount","styleProps","length","stickyLeftColumns","stickyRightColumns","contentColumns","stickyLeftData","stickyRightData","contentData","theadChildren","filter","child","type","tbodyChildren","getTbodyChildren","className","Tr","Consumer","headOrBodyContext","style","width","spacerElement","Fragment","context","slicedChildren","forEach","idx","push","Th","Td","stuff","MyTHeadCell","color","float","align","MyTBodyCell","App","label","rowsToGenerate","rows","i","j","getData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.725a0af9.chunk.js","sourcesContent":["\n\n\nfunction addDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nconst getValueForColumn = (column, age) => {\n    switch(column.id) {\n        case 'date':\n            return addDays(new Date(), age).toLocaleDateString();\n        case 'age':\n            return '' + age;\n        case 'actions':\n            return 'Actions';\n        case 'details':\n            return 'Details';\n        default:\n            const val = parseInt(Math.random() * 1000000);\n            const formatted = Intl.NumberFormat('de-DE').format(val);\n            return formatted;\n    }\n}\n\n\nexport default ({rowsToGenerate=30, columns=[]}) => {\n    const rows = [];\n\n    for(let i = 0; i < rowsToGenerate; i++) {\n        const row = [];\n\n        for(let j = 0; j < columns.length; j++) {\n            const column = columns[j];\n\n            const val = getValueForColumn(column, i);\n            row.push(val);\n        }\n\n        rows.push(row);\n    }\n\n    return rows;\n};","import React from 'react';\n    const LocationContext = React.createContext({\n        tableElement: null, // head, body, foot\n    });\n\n    export default LocationContext;","import React from 'react';\nimport HeadOrBodyContext from './HeadOrBodyContext';\n\nconst THead = (props) => {\n    const {children} = props;\n    return (\n        <HeadOrBodyContext.Provider value={{tableElement: 'thead'}}>\n            <thead>\n                {children}\n            </thead>\n        </HeadOrBodyContext.Provider>\n    )\n}\nexport default THead;","import React from 'react';\nimport HeadOrBodyContext from './HeadOrBodyContext';\n\nconst TBody = (props) => {\n    const {children} = props;\n    return (\n        <HeadOrBodyContext.Provider value={{tableElement: 'thead'}}>\n            <tbody>\n                {children}\n            </tbody>\n        </HeadOrBodyContext.Provider>\n    )\n}\nexport default TBody;","import React from 'react';\n    const LocationContext = React.createContext({\n        addSpacer: false,\n        columns: 0,\n        data: [],\n        slice: {\n            from: 0,\n            to: undefined,\n        },\n    });\n\n    export default LocationContext;","import React from 'react';\nimport THead from './THead';\nimport TBody from './TBody';\nimport Content from './Content';\nimport StickyLeft from './StickyLeft';\nimport StickyRight from './StickyRight';\nimport LocationContext from './LocationContext';\nimport Location from './Location';\n\nconst getDataSlice = (data, from, till) => {\n    return data.map((row) => {\n        return row.slice(from, till);\n    });\n}\n\nconst getTheadChildren = (children) => {\n    return children.filter((child) => {\n        return child.type === THead;\n    });\n}\nconst getTbodyChildren = (children) => {\n    return children.filter((child) => {\n        return child.type === TBody;\n    });\n}\n\nexport default (props) => {\n\n    const {\n        stickyLeftColumnCount=0,\n        stickyRightColumnCount=0,\n        data=[],\n        columns=[],\n        styleProps={}\n    } = props;\n\n    const contentColumnCount=columns.length - stickyLeftColumnCount - stickyRightColumnCount;\n\n    // split columns for: sticky-left-columns, content-columns, sticky-right-columns\n    const stickyLeftColumns = columns.slice(0, stickyLeftColumnCount);\n    const stickyRightColumns = columns.slice(stickyLeftColumnCount + contentColumnCount);\n    const contentColumns = columns.slice(stickyLeftColumnCount, stickyLeftColumnCount+contentColumnCount)\n\n    // split data for sticky-left-columns, content-columns, sticky-right-columns\n    const stickyLeftData = getDataSlice(data, 0, stickyLeftColumnCount);\n    const stickyRightData = getDataSlice(data, stickyLeftColumnCount + contentColumnCount)\n    const contentData = getDataSlice(data, stickyLeftColumnCount, stickyLeftColumnCount+contentColumnCount);\n\n    \n    const theadChildren = getTheadChildren(props.children);\n    const tbodyChildren = getTbodyChildren(props.children);\n\n\n    return (\n        <div className=\"sft-wrapper-wrapper\">\n            <div className=\"sft-wrapper\">\n                \n                <div className=\"sft-sticky-left\">\n    {/* }\n                    <Location \n                        columns={stickyLeftColumns}\n                        data={stickyLeftData} \n                        slice={{from: 0, to: stickyLeftColumnCount}}\n                        \n                        theadChildren={theadChildren}\n                        tbodyChildren={tbodyChildren}\n                    />\n    */}\n                    <LocationContext.Provider value={{\n                        columns: stickyLeftColumns,\n                        data: stickyLeftData,\n                        slice: {\n                            from: 0,\n                            to: stickyLeftColumnCount,\n                        },\n                    }}>\n                        <table>\n                            {theadChildren}\n                            {tbodyChildren}\n                        </table>\n                    </LocationContext.Provider>\n                </div>\n                \n                <div className=\"sft-content\">\n                    <LocationContext.Provider value={{\n                        addSpacer: true,\n                        columns: contentColumns,\n                        data: contentData,\n                        slice: {\n                            from: stickyLeftColumnCount,\n                            to:  stickyLeftColumnCount+contentColumnCount,\n                        },\n                    }}>\n                        <table>\n                            {theadChildren}\n                            {tbodyChildren}\n                        </table>\n                    </LocationContext.Provider>\n                </div>\n\n                <div className=\"sft-sticky-right\">\n                    <LocationContext.Provider value={{\n                        columns: stickyRightColumns,\n                        data: stickyRightData,\n                        slice: {\n                            from: stickyLeftColumnCount+contentColumnCount,\n                            to: undefined,\n                        },\n                    }}>\n                        <table>\n                            {theadChildren}\n                            {tbodyChildren}\n                        </table>\n                    </LocationContext.Provider>\n                </div>\n            </div>\n        </div>\n    )\n}","import Table from './Table';\nimport THead from './THead';\nimport Tr from './Tr';\nimport Th from './Th';\nimport TBody from './TBody';\nimport Td from './Td';\n\nexport default {\n Table: Table,\n THead: THead,\n Tr: Tr,\n Th: Th,\n TBody: TBody,\n Td: Td\n};","import React from 'react';\nimport LocationContext from './LocationContext';\nimport HeadOrBodyContext from './HeadOrBodyContext';\n\nconst Tr = (props) => {\n    const {children} = props;\n    return (\n        <tr>\n            <HeadOrBodyContext.Consumer>\n                {(headOrBodyContext) => {\n\n                    const {tableElement} = headOrBodyContext;\n\n                    const style = {width: '100%'};\n                    const spacerElement = tableElement === 'thead' ? <th className=\"sft-spacer\" style={style} /> : <td className=\"sft-spacer\" style={style} />;\n\n                    return (\n                        <React.Fragment>\n                            <LocationContext.Consumer>\n                            {(context) => {\n                                const {columns, slice, data, addSpacer, tableElement} = context;\n                                const slicedChildren = children.slice(slice.from, slice.to);\n\n                                slicedChildren.forEach((child, idx) => {\n                                    // set column and data in prop\n                                    // const _data = data[idx];\n                                    // child.props.data = _data;\n                                })\n\n                                if(addSpacer) {\n                                    slicedChildren.push(spacerElement);\n                                }\n\n                                return slicedChildren;\n                            }}\n                            </LocationContext.Consumer>\n                        </React.Fragment>\n                    )\n                }}\n            </HeadOrBodyContext.Consumer>\n        </tr>\n    )\n}\nexport default Tr;","import React from 'react';\n\nexport default (props) => {\n\n    const x = 'y';\n\n    return (\n        <th>\n            <div>\n                {props.children}\n            </div>\n        </th>\n    )\n}","import React from 'react';\n\nexport default (props) => {\n    return (\n        <td>\n            <div>\n                {props.children}\n            </div>\n        </td>\n    )\n}","import React from 'react';\nimport './App.css';\n\nimport getData from './utils/getData';\nimport stuff from './sticky-flex';\nconst {Table, THead, Tr, Th, TBody, Td} = stuff;\n\nfunction MyTHeadCell(props) {\n  return (\n    <span style={{color: 'brown', float: props.column.align}}>{props.children}</span>\n  )\n}\nfunction MyTBodyCell(props) {\n  return (\n    <span style={{color: '#111', float: props.column.align}}>{props.children}</span>\n  )\n}\n\nfunction App() {\n  const getColumns = () => {\n    return [\n        {id: 'date', label: 'Date', align: \"right\"},\n        {id: 'age', label: 'Age', align: \"right\"},\n\n        {id: 'oranges', label: 'Oranges', align: \"right\"},\n        {id: 'apples', label: 'Apples', align: \"right\"},\n        {id: 'kiwis', label: 'Kiwis', align: \"right\"},\n        {id: 'bananas', label: 'Bananas', align: \"right\"},\n        {id: 'strawberries', label: 'XXL Strawberries biological and from your local farmer', align: \"right\"},\n        {id: 'raspberries', label: 'Raspberries', align: \"right\"},\n        {id: 'peaches', label: 'Peaches', align: \"right\"},\n\n        {id: 'actions', label: 'Actions', align: \"left\"},\n        {id: 'details', label: 'Details', align: \"left\"},\n    ]\n  }\n\n\n  /**\n   * Todo: pass these down and accept them\n   */\n  const getStyleProps = () => {\n\n    return {};\n\n    const styleProps = {\n      // variables to interpret.\n      maxTableWidth: '1024px', // optional\n      maxTableHeight: 'calc(100vh - 180px)', // optional\n      tableCellPadding: '16px', // optional\n\n      tableHeadCellHeight: '150px', // required\n      tableCellHeight: '18px', // required\n      minColWidth: '40px', // optional\n      maxColWidth: '100px', // optionsal\n    }\n  }\n\n  const styleProps = getStyleProps();\n  const columns = getColumns();\n  const data = getData({rowsToGenerate: 300, columns});\n\n\n  return (\n    <div className=\"App\">\n        <Table\n          stickyLeftColumnCount={3} // amount of columns that will stick to the left side\n          stickyRightColumnCount={2} // amount of columns that will stick to the right side\n          data={data} // data set, an array with arrays of lengths equal to columns.length\n          columns={columns} // column definitions\n\n          styleProps={styleProps}\n        >\n            <THead>\n              <Tr>\n                {columns.map((column) => (\n                  <Th>\n                      <MyTHeadCell column={column}>{column.label}</MyTHeadCell>\n                  </Th>\n                ))}\n              </Tr>\n            </THead>\n\n            <TBody>\n              {data.map((row) => (\n                <Tr>\n                  {columns.map((column, idx) => (\n                    <Td>\n                      <MyTBodyCell column={column}>{row[idx]}</MyTBodyCell>\n                    </Td>\n                  ))}\n                </Tr>\n              ))}\n            </TBody>\n        </Table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}